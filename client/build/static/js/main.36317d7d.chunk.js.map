{"version":3,"sources":["utils/https.js","pages/submitPost.js","pages/default.js","components/post.js","pages/postBoard.js","App.js","serviceWorker.js","index.js"],"names":["postOptions","hostname","path","method","headers","Content-Type","https","create","bubble_id","title","author","body","postData","querystring","stringify","bubbleID","Promise","resolve","reject","request","response","data","on","chunk","write","end","err","getAllPosts","get","JSON","parse","Post","state","postTitle","postBody","handleInputChange","event","_event$target","target","name","value","_this","setState","Object","defineProperty","submitPost","preventDefault","API","props","userID","then","catch","console","log","react_default","a","createElement","id","this","onChange","onClick","Component","Default","PostBoard","posts","loadPosts","components_post","App","BrowserRouter","Switch","Route","exact","component","SubmitPost","Boolean","window","location","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4ZAGMA,EAAc,CAClBC,SAAU,gCACVC,KAAM,eACNC,OAAQ,OACRC,QAAS,CACDC,eAAgB,sCAIXC,EAAA,CAEbC,OAAQ,SAACC,EAAWC,EAAOC,EAAQC,GACjC,IAAMC,EAAWC,IAAYC,UAAU,CACrCC,SAAYP,EACZC,MAASA,EACTC,OAAUA,EACVC,KAAQA,IAGV,OAAO,IAAIK,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAUb,IAAMa,QAAQnB,EAAa,SAACoB,GAC1C,IAAIC,EAAO,GACXD,EAASE,GAAG,OAAQ,SAACC,GACnBF,GAAQE,IAEVH,EAASE,GAAG,MAAO,WACjBL,EAAQI,OAGZF,EAAQK,MAAMZ,GACdO,EAAQM,MACRN,EAAQG,GAAG,QAAS,SAACI,GAAD,OAASR,EAAOQ,QAGxCC,YAAa,WAEX,OAAO,IAAIX,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAUb,IAAMsB,IAFZ,oDAEqB,SAACR,GAC9B,IAAIC,EAAO,GACXD,EAASE,GAAG,OAAQ,SAACC,GAAYF,GAAQE,IACzCH,EAASE,GAAG,MAAO,WAAQL,EAAQY,KAAKC,MAAMT,QAEhDF,EAAQM,MACRN,EAAQG,GAAG,QAAS,SAACI,GAAD,OAASR,EAAOQ,SCH3BK,6MAtCbC,MAAQ,CACNC,UAAW,GACXC,SAAU,MAGZC,kBAAoB,SAAAC,GAAS,IAAAC,EACHD,EAAME,OAAtBC,EADmBF,EACnBE,KAAMC,EADaH,EACbG,MACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBJ,EAAOC,OAG1BK,WAAa,SAAAT,GACXA,EAAMU,iBAENC,EAAIxC,OAAOkC,EAAKO,MAAMjC,SAAU0B,EAAKT,MAAMC,UAAWQ,EAAKO,MAAMC,OAAQR,EAAKT,MAAME,UACjFgB,KAAK,SAAA9B,GACJqB,EAAKC,SAAS,CACZT,UAAW,GACXC,SAAU,OAEXiB,MAAM,SAACzB,GAAD,OAAS0B,QAAQC,IAAI3B,8EAIhC,OACE4B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SAAOC,GAAG,QAAQlB,KAAK,YAAYC,MAAOkB,KAAK1B,MAAMC,UAAW0B,SAAUD,KAAKvB,oBAC/EmB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,YAAUC,GAAG,OAAOlB,KAAK,WAAWC,MAAOkB,KAAK1B,MAAME,SAAUyB,SAAUD,KAAKvB,oBAC/EmB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQI,QAASF,KAAKb,YAAtB,iBAhCSgB,aCQJC,mLARX,OACER,EAAAC,EAAAC,cAAA,iCAHgBK,aCQP9B,eAPF,SAAAiB,GAAK,OAChBM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WAAMR,EAAMpC,SAASH,OACrB6C,EAAAC,EAAAC,cAAA,WAAMR,EAAMpC,SAASD,SCgCVoD,6MAhCb/B,MAAQ,CACNgC,MAAO,CAAC,CACNvD,MAAO,aACPE,KAAM,iBAIVwB,kBAAoB,SAAAC,GAAS,IAAAC,EACHD,EAAME,OAAtBC,EADmBF,EACnBE,KAAMC,EADaH,EACbG,MACdC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBJ,EAAOC,OAO1ByB,UAAY,WACVlB,EAAIpB,cACDuB,KAAK,SAAA9B,GACJgC,QAAQC,IAAIjC,GACZqB,EAAKC,SAAS,CAAEsB,MAAO5C,MAExB+B,MAAM,SAACzB,GAAD,OAAS0B,QAAQC,IAAI3B,yFAT9BgC,KAAKO,6CAaL,OACEX,EAAAC,EAAAC,cAACU,EAAD,CAAMtD,SAAU8C,KAAK1B,MAAMgC,MAAM,YA5BfH,aCaTM,EAZH,kBACVb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,OAAK,EAACrE,KAAM,IAAIsE,UAAWT,IAClCT,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,OAAK,EAACrE,KAAM,QAAQsE,UAAWC,IACtCnB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOE,UAAWV,QCANY,QACW,cAA7BC,OAAOC,SAAS3E,UAEe,UAA7B0E,OAAOC,SAAS3E,UAEhB0E,OAAOC,SAAS3E,SAAS4E,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.36317d7d.chunk.js","sourcesContent":["import https from \"https\";\r\nimport querystring from \"querystring\";\r\n\r\nconst postOptions = {\r\n  hostname: \"bubble-sql-test.herokuapp.com\",\r\n  path: \"/api/posts/2\",\r\n  method: \"POST\",\r\n  headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded'\r\n  }\r\n}\r\n\r\nexport default {\r\n  //POST REQUEST (adding a post to database)\r\n  create: (bubble_id, title, author, body) => {\r\n    const postData = querystring.stringify({\r\n      \"bubbleID\": bubble_id,\r\n      \"title\": title,\r\n      \"author\": author,\r\n      \"body\": body\r\n    });\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const request = https.request(postOptions, (response) => {\r\n        let data = '';\r\n        response.on('data', (chunk) => {\r\n          data += chunk;\r\n        });\r\n        response.on('end', () => {\r\n          resolve(data);\r\n        })\r\n      });\r\n      request.write(postData);\r\n      request.end();\r\n      request.on('error', (err) => reject(err));\r\n    });\r\n  },\r\n  getAllPosts: () => {\r\n    const url = 'https://bubble-sql-test.herokuapp.com/api/posts/2';\r\n    return new Promise((resolve, reject) => {\r\n      const request = https.get(url, (response) => {\r\n        let data = '';\r\n        response.on('data', (chunk) => { data += chunk; });\r\n        response.on('end', () => { resolve(JSON.parse(data)) });\r\n      });\r\n      request.end();\r\n      request.on('error', (err) => reject(err));\r\n    });\r\n  }\r\n  //END OF EXPORT\r\n}\r\n","import React, { Component } from 'react';\r\nimport './submitPost.css';\r\nimport API from '../utils/https';\r\n\r\nclass Post extends Component {\r\n  state = {\r\n    postTitle: \"\",\r\n    postBody: \"\"\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  submitPost = event => {\r\n    event.preventDefault();\r\n\r\n    API.create(this.props.bubbleID, this.state.postTitle, this.props.userID, this.state.postBody)\r\n      .then(response => {\r\n        this.setState({\r\n          postTitle: \"\",\r\n          postBody: \"\"\r\n        })\r\n      }).catch((err) => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <h3>Title:</h3>\r\n          <input id=\"title\" name=\"postTitle\" value={this.state.postTitle} onChange={this.handleInputChange}></input>\r\n          <h3>Message:</h3>\r\n          <textarea id=\"body\" name=\"postBody\" value={this.state.postBody} onChange={this.handleInputChange}></textarea>\r\n          <br></br>\r\n          <button onClick={this.submitPost}>Post</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react';\r\n\r\nclass Default extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        Hello World\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Default;\r\n","import React, { Component } from 'react';\r\nimport './post.css'\r\n\r\nconst Post = props => (\r\n  <div>\r\n    <div>{props.postData.title}</div>\r\n    <div>{props.postData.body}</div>\r\n  </div>\r\n);\r\n\r\nexport default Post;\r\n","import React, { Component } from 'react';\r\nimport './postBoard.css';\r\nimport API from '../utils/https';\r\nimport Post from '../components/post.js';\r\n\r\nclass PostBoard extends Component {\r\n  state = {\r\n    posts: [{\r\n      title: \"Temp Title\",\r\n      body: \"Temp Body\"\r\n    }]\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadPosts();\r\n  }\r\n\r\n  loadPosts = () => {\r\n    API.getAllPosts()\r\n      .then(response =>  {\r\n        console.log(response);\r\n        this.setState({ posts: response })\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Post postData={this.state.posts[0]}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PostBoard;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport SubmitPost from './pages/submitPost.js';\nimport Default from './pages/default.js';\nimport PostBoard from './pages/postBoard.js';\n\nconst App = () => (\n  <Router>\n    <div>\n      <Switch>\n        <Route exact path ='/' component={PostBoard} />\n        <Route exact path ='/post' component={SubmitPost} />\n        <Route component={Default} />\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}